# This command allows to store in the more primitive way somethin using git
[command] echo "what_we_want_to_store" | git hash-object --stdin -w (For write)

# This is how we retrive the content associated with a hash
[command] git cat-file -p (For print) {Hash}

# We can save the contents of file and retrive it later, as we say. We didn't
# commit anything yet but it doesn't stop us using this functionalities example:

# dogs.txt This file content some lines. [Hash] dfa1s2das121 (Sha-1, 40 chars)
# Atos
# ...
# ...
# ...

# If we made some changes and want to retrive the file as the previous state
# we could do that using the command below

git cat-file -p dfa1s2da (Is not neccesary to put all the chars) > dogs.txt

# And then our file was restored to the previous state.

# This line of code will return the type of the hash, git use 4 types of 
# hash-objects, BLOB (Binary large object, just content) TREE, (A more
# sophisticated structure which store names of file and point a blob to
# a name, to indentify the content. Also, Tree may point others trees. 
# COMMIT, this is the most complete of all, it points to a root tree, author
# parent commit, in other words all the structure and changes of our files.


# To check the type
[Command] git cat-file -t {hash}

# To put text and create text on the same time
[Command] echo {content} > {file_name}


